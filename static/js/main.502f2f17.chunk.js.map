{"version":3,"sources":["components/Header/Header.tsx","components/Main/DriverComponent.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","search","event","props","methodSearch","target","value","placeholder","type","onChange","this","role","aria-label","React","Component","DriverComponent","state","isHover","isAnimatedDown","onMouseEnter","setState","onMouseLeave","driver","data","className","rank","src","main_pic","alt","name","href","phone","email","Main","driverList","fetch","then","res","json","filter","toLowerCase","includes","searchHeader","map","key","id","App","filteredText","searchText","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAKaA,EAAb,2MACCC,OAAS,SAACC,GACT,EAAKC,MAAMC,aAAaF,EAAMG,OAAOC,QAFvC,wEAKE,OAAO,gCACH,4CACA,+BACG,2BACCC,YAAY,YACZC,KAAK,SACLC,SAAUC,KAAKT,SAEhB,0BAAMU,KAAK,MAAMC,aAAW,UAA5B,sBAbT,GAA4BC,IAAMC,WCMrBC,EAAb,2MACCC,MAA+B,CAC9BC,SAAS,EACTC,gBAAgB,GAHlB,EAKCC,aAAe,WACd,EAAKC,SAAS,CAAEF,gBAAgB,EAAMD,SAAS,KANjD,EAQCI,aAAe,WACd,EAAKD,SAAS,CAAEF,gBAAgB,EAAOD,SAAS,KATlD,wEAWW,IACKK,EAAWZ,KAAKP,MAAtBoB,KACR,OAAO,4BACPJ,aAAeT,KAAKS,aACpBE,aAAeX,KAAKW,aACpBG,UAAY,gBAAmBd,KAAKM,MAAME,eAAiB,kBAAoB,KAC9E,yBAAKM,UAAY,qBAAwC,YAAhBF,EAAOG,KAAsB,UAAY,iBACjF,yBAAKC,IAAM,kBAAoBJ,EAAOK,SAAWC,IAAI,MAEtD,oCAAcN,EAAOO,MACrB,2BAAKP,EAAOG,MAEXf,KAAKM,MAAMC,SAAW,yBAAKO,UAAU,eACpC,uBAAGM,KAAO,OAASR,EAAOS,OAAU,iBAAmBT,EAAOS,OAC9D,uBAAGD,KAAO,UAAYR,EAAOU,OAAU,UAAYV,EAAOU,aAzB/D,GAAqCnB,IAAMC,WCI9BmB,EAAb,2MACCjB,MAAmB,CAClBkB,WAAY,IAFd,mFAKsB,IAAD,OACnBC,MAAM,wBACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAb,GACL,EAAKH,SAAS,CACbc,WAAYX,SAVhB,+BAeW,IAAD,OACR,OAAO,8BACN,yBAAKC,UAAU,gBAEdd,KAAKM,MAAMkB,WACTK,QACA,SAAAjB,GAAM,OAAIA,EAAOO,KAAKW,cAAcC,SAAS,EAAKtC,MAAMuC,eAAiBpB,EAAOG,KAAKgB,SAAS,EAAKtC,MAAMuC,iBAEzGC,KACA,SAAArB,GAAM,OAAI,kBAAC,EAAD,CAAiBC,KAAMD,EAAQsB,IAAKtB,EAAOuB,cAxB3D,GAA0BhC,IAAMC,WCSjBgC,G,iNAfd9B,MAAQ,CACP+B,aAAc,I,EAEf9C,OAAS,SAAC+C,GACT,EAAK5B,SAAS,CAAC2B,aAAcC,K,wEAI7B,OAAO,oCACN,kBAAC,EAAD,CAAQ5C,aAAcM,KAAKT,SAC3B,kBAAC,EAAD,CAAMyC,aAAchC,KAAKM,MAAM+B,oB,GAXhBlC,IAAMC,YCIJmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.502f2f17.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface SearchProps {\r\n\tmethodSearch: (event: MouseEvent) => void\r\n}\r\nexport class Header extends React.Component<SearchProps, {}> {\r\n\tsearch = (event) => {\r\n\t\tthis.props.methodSearch(event.target.value)\r\n\t}\r\n\trender() {\r\n\t\treturn <header>\r\n    \t\t<h1>Contact List</h1>\r\n    \t\t<label>\r\n      \t\t\t<input \r\n\t      \t\t\tplaceholder=\"search...\" \r\n\t      \t\t\ttype=\"search\" \r\n\t      \t\t\tonChange={this.search}\r\n      \t\t\t/>\r\n      \t\t\t<span role=\"img\" aria-label=\"search\">üîç</span>\r\n    \t\t</label>\r\n  \t\t</header>\r\n\t}\r\n}","import React from 'react';\r\n\r\nimport { Driver } from \"./Main\"\r\n\r\ninterface DriverComponentProps {\r\n\tdata: Driver\r\n}\r\ninterface DriverCompomemtState {\r\n\tisHover: boolean, \r\n\tisAnimatedDown: boolean\r\n}\r\nexport class DriverComponent extends React.Component <DriverComponentProps, {}> {\r\n\tstate : DriverCompomemtState = {\r\n\t\tisHover: false,\r\n\t\tisAnimatedDown: false\r\n\t}\r\n\tonMouseEnter = () => {\r\n\t\tthis.setState({ isAnimatedDown: true, isHover: true })\r\n\t}\r\n\tonMouseLeave = () => {\r\n\t\tthis.setState({ isAnimatedDown: false, isHover: false })\r\n\t}\r\n\trender() {\r\n\t\tconst { data: driver } = this.props\r\n\t\treturn\t<figure \r\n\t\tonMouseEnter={ this.onMouseEnter }\r\n\t\tonMouseLeave={ this.onMouseLeave }\r\n\t\tclassName={ \"contact_data\" +  (this.state.isAnimatedDown ? \" isAnimatedDown\" : \"\") }>\r\n\t\t\t<div className={ 'figure-container ' + ((driver.rank === 'citizen') ? 'citizen' : 'professional') } >\r\n\t\t\t\t<img src={ 'images/drivers/' + driver.main_pic } alt=\"\" />\r\n\t\t\t</div>\r\n\t\t\t<figcaption>{ driver.name }</figcaption>\r\n\t\t\t<p>{ driver.rank }</p>\r\n\t\t\t{\r\n\t\t\t\tthis.state.isHover && <div className=\"hovers_data\">\r\n\t\t\t\t\t<a href={ \"tel:\" + driver.phone }>{ \"Phone Number: \" + driver.phone }</a>\r\n\t\t\t\t\t<a href={ \"mailto:\" + driver.email }>{ \"Email: \" + driver.email }</a>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</figure>\r\n\t}\r\n}","import React from 'react';\r\n\r\nimport { DriverComponent } from \"./DriverComponent\"\r\n\r\nexport interface Driver {\r\n\tid: number,\r\n\tname: string,\r\n\trank: string,\r\n\tphone: string,\r\n\temail: string,\r\n\tmain_pic: string\r\n}\r\ninterface MainState { \r\n\tdriverList: Driver[],\r\n}\r\nexport class Main extends React.Component<{ searchHeader: string }, MainState > {\r\n\tstate: MainState = {\r\n\t\tdriverList: [],\r\n\t}\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tfetch(\"./data-api/data.json\")\r\n\t\t.then(res => res.json())\r\n\t\t.then(data => {\r\n\t\t\tthis.setState({ \r\n\t\t\t\tdriverList: data\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn <main>\r\n\t\t\t<div className=\"drivers_list\">\r\n\t\t\t{\r\n\t\t\t\tthis.state.driverList\r\n\t\t\t\t\t.filter(\r\n\t\t\t\t\t\tdriver => driver.name.toLowerCase().includes(this.props.searchHeader) || driver.rank.includes(this.props.searchHeader)\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t.map(\r\n\t\t\t\t\t\tdriver => <DriverComponent data={driver} key={driver.id} />\r\n\t\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t</main>\r\n\t}\r\n}","import React from 'react';\n\nimport { Header } from \"./components/Header/Header\"\nimport { Main } from \"./components/Main/Main\"\n\nimport './App.css';\n\n\nclass App extends React.Component<{}, {}> {\n\tstate = {\n\t\tfilteredText: \"\"\n\t}\n\tsearch = (searchText) => {\n\t\tthis.setState({filteredText: searchText})\n\t}\n\n\trender() {\n\t\treturn <>\n\t\t\t<Header methodSearch={this.search} />\n\t\t\t<Main searchHeader={this.state.filteredText} />\n\t\t</>\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}